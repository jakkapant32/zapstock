import React, { useEffect, useState } from 'react';
import { Alert, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { BASE_URL, findWorkingUrl, testAllConnections, testMainConnection } from '../constants/ApiConfig';

interface ConnectionResult {
  url: string;
  working: boolean;
}

export default function NetworkTester() {
  const [isTesting, setIsTesting] = useState(false);
  const [mainConnectionStatus, setMainConnectionStatus] = useState<boolean | null>(null);
  const [allConnections, setAllConnections] = useState<ConnectionResult[]>([]);
  const [workingUrl, setWorkingUrl] = useState<string | null>(null);

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å
  const testMainConnectionHandler = async () => {
    setIsTesting(true);
    try {
      const isWorking = await testMainConnection();
      setMainConnectionStatus(isWorking);
      
      if (isWorking) {
        Alert.alert('‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${BASE_URL}`);
      } else {
        Alert.alert('‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${BASE_URL}`);
      }
    } catch (error) {
      setMainConnectionStatus(false);
      Alert.alert('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    } finally {
      setIsTesting(false);
    }
  };

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const testAllConnectionsHandler = async () => {
    setIsTesting(true);
    try {
      const results = await testAllConnections();
      setAllConnections(results);
      
      const workingCount = results.filter(r => r.working).length;
      Alert.alert('üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö', `‡∏û‡∏ö ${workingCount} ‡∏à‡∏≤‡∏Å ${results.length} IP ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`);
    } catch (error) {
      Alert.alert('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    } finally {
      setIsTesting(false);
    }
  };

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  const findWorkingUrlHandler = async () => {
    setIsTesting(true);
    try {
      const url = await findWorkingUrl();
      setWorkingUrl(url);
      
      if (url) {
        Alert.alert('üéØ ‡∏û‡∏ö URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', url);
      } else {
        Alert.alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡πÅ‡∏•‡∏∞ Backend');
      }
    } catch (error) {
      Alert.alert('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    } finally {
      setIsTesting(false);
    }
  };

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
  useEffect(() => {
    testMainConnectionHandler();
  }, []);

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>üåê Network Connection Tester</Text>
        <Text style={styles.subtitle}>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Backend</Text>
      </View>

      {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å</Text>
        <View style={styles.statusContainer}>
          <Text style={styles.urlText}>URL: {BASE_URL}</Text>
          <View style={styles.statusIndicator}>
            {mainConnectionStatus === null && (
              <Text style={styles.statusText}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...</Text>
            )}
            {mainConnectionStatus === true && (
              <Text style={[styles.statusText, styles.successText]}>‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ</Text>
            )}
            {mainConnectionStatus === false && (
              <Text style={[styles.statusText, styles.errorText]}>‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ</Text>
            )}
          </View>
        </View>
        
        <TouchableOpacity
          style={[styles.button, styles.primaryButton]}
          onPress={testMainConnectionHandler}
          disabled={isTesting}
        >
          <Text style={styles.buttonText}>
            {isTesting ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : 'üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å'}
          </Text>
        </TouchableOpacity>
      </View>

      {/* ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
        <TouchableOpacity
          style={[styles.button, styles.secondaryButton]}
          onPress={testAllConnectionsHandler}
          disabled={isTesting}
        >
          <Text style={styles.buttonText}>
            {isTesting ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : 'üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å IP'}
          </Text>
        </TouchableOpacity>

        {allConnections.length > 0 && (
          <View style={styles.resultsContainer}>
            {allConnections.map((result, index) => (
              <View key={index} style={styles.resultItem}>
                <Text style={styles.resultUrl}>{result.url}</Text>
                <Text style={[
                  styles.resultStatus,
                  result.working ? styles.successText : styles.errorText
                ]}>
                  {result.working ? '‚úÖ' : '‚ùå'}
                </Text>
              </View>
            ))}
          </View>
        )}
      </View>

      {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üéØ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</Text>
        <TouchableOpacity
          style={[styles.button, styles.successButton]}
          onPress={findWorkingUrlHandler}
          disabled={isTesting}
        >
          <Text style={styles.buttonText}>
            {isTesting ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...' : 'üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'}
          </Text>
        </TouchableOpacity>

        {workingUrl && (
          <View style={styles.workingUrlContainer}>
            <Text style={styles.workingUrlTitle}>üéØ URL ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:</Text>
            <Text style={styles.workingUrlText}>{workingUrl}</Text>
          </View>
        )}
      </View>

      {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</Text>
        <View style={styles.tipsContainer}>
          <Text style={styles.tipText}>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Wi-Fi ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô</Text>
          <Text style={styles.tipText}>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà port 3000</Text>
          <Text style={styles.tipText}>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Windows Firewall ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï port 3000</Text>
          <Text style={styles.tipText}>‚Ä¢ ‡πÉ‡∏ä‡πâ IP: 10.214.162.160:3000 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å</Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    padding: 16,
  },
  header: {
    alignItems: 'center',
    marginBottom: 24,
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  section: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
  },
  statusContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  urlText: {
    fontSize: 14,
    color: '#666',
    flex: 1,
  },
  statusIndicator: {
    marginLeft: 12,
  },
  statusText: {
    fontSize: 14,
    fontWeight: '600',
  },
  successText: {
    color: '#28a745',
  },
  errorText: {
    color: '#dc3545',
  },
  button: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 12,
  },
  primaryButton: {
    backgroundColor: '#007bff',
  },
  secondaryButton: {
    backgroundColor: '#6c757d',
  },
  successButton: {
    backgroundColor: '#28a745',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  resultsContainer: {
    marginTop: 16,
  },
  resultItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 6,
    marginBottom: 8,
  },
  resultUrl: {
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  resultStatus: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  workingUrlContainer: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#d4edda',
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#28a745',
  },
  workingUrlTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#155724',
    marginBottom: 8,
  },
  workingUrlText: {
    fontSize: 14,
    color: '#155724',
    fontFamily: 'monospace',
  },
  tipsContainer: {
    backgroundColor: '#e7f3ff',
    padding: 16,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#007bff',
  },
  tipText: {
    fontSize: 14,
    color: '#004085',
    marginBottom: 8,
    lineHeight: 20,
  },
});

